{% assign product_id = block.settings.product_id | default: product.id %}
<div class="feedback-form-container">
  <form id="feedback-form" data-product-id="{{ product_id }}">
    <div class="form-group">
      <label for="name">Name</label>
      <input type="text" id="name" name="name" required>
    </div>
    <div class="form-group">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" required>
    </div>
    <div class="form-group">
      <label for="comment">Comment</label>
      <textarea id="comment" name="comment" required></textarea>
    </div>
    <button type="submit">Submit Feedback</button>
    <p id="form-message" class="form-message"></p>
  </form>
</div>

<style>
.feedback-form-container {
  max-width: 500px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background: #f9f9f9;
}
.form-group {
  margin-bottom: 15px;
}
.form-group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}
.form-group input,
.form-group textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 16px;
}
.form-group textarea {
  min-height: 100px;
  resize: vertical;
}
button {
  background: #007bff;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
button:hover {
  background: #0056b3;
}
.form-message {
  margin-top: 10px;
  color: #28a745;
}
.form-message.error {
  color: #dc3545;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const form = document.querySelector("#feedback-form");
  if (form) {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const productId = form.dataset.productId;
      const name = form.querySelector("#name").value.trim();
      const email = form.querySelector("#email").value.trim();
      const comment = form.querySelector("#comment").value.trim();
      const messageEl = form.querySelector("#form-message");

      if (!name || !email || !comment) {
        messageEl.textContent = "All fields are required.";
        messageEl.classList.add("error");
        return;
      }
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        messageEl.textContent = "Invalid email format.";
        messageEl.classList.add("error");
        return;
      }

      const submitButton = form.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.textContent;
      submitButton.disabled = true;
      submitButton.textContent = 'Submitting...';
      messageEl.textContent = '';
      messageEl.classList.remove('error');

      const requestData = { productId, name, email, comment };
      console.log('Sending data:', requestData);

      try {
        const response = await fetch('/apps/proxy', {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify(requestData),
        });

        const responseText = await response.text();
        console.log('Raw response:', responseText);

        if (!responseText) {
          throw new Error('Empty response from server');
        }

        const result = JSON.parse(responseText);

        if (!response.ok) {
          throw new Error(result.error || `Server error: ${response.status}`);
        }

        if (result.success) {
          messageEl.textContent = "Feedback submitted successfully!";
          form.reset();
        } else {
          throw new Error(result.error || "Error submitting feedback.");
        }
      } catch (error) {
        console.error("Submission error:", {
          message: error.message,
          stack: error.stack
        });
        messageEl.textContent = error.message || 'An unexpected error occurred';
        messageEl.classList.add("error");
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;
      }
    });
  }
});
</script>

{% schema %}
{
  "name": "Customer Feedback Form",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "product_id",
      "label": "Product ID",
      "info": "Enter the Product ID for feedback collection (leave blank to use current product)"
    }
  ]
}
{% endschema %}